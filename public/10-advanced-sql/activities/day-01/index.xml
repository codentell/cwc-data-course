<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Day 1 on </title>
    <link>/10-advanced-sql/activities/day-01/</link>
    <description>Recent content in Day 1 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="/10-advanced-sql/activities/day-01/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01. Basic SQL Connection 👩‍🏫🧑‍🏫</title>
      <link>/10-advanced-sql/activities/day-01/01-basic-sql-connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/01-basic-sql-connection/</guid>
      <description> # SQLAlchemy from sqlalchemy import create_engine  # Path to sqlite database_path = &amp;#34;./resources/Census_Data.sqlite&amp;#34;  # Create an engine that can talk to the database engine = create_engine(f&amp;#34;sqlite:///{database_path}&amp;#34;)  # Query All Records in the the Database data = engine.execute(&amp;#34;SELECT * FROM Census_Data&amp;#34;)  for record in data:  print(record) </description>
    </item>
    
    <item>
      <title>02. Ice Cream Connection 👩‍🎓👨‍🎓</title>
      <link>/10-advanced-sql/activities/day-01/02-ice-cream-connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/02-ice-cream-connection/</guid>
      <description>Ice Cream Connection In this activity, you will create, connect to, and insert data into a new database by using SQLAlchemy.
Instructions   Use the database path to create a SQLite engine.
  Use the engine to select all of the rows and columns from the table icecreamstore.
  Create a new query that finds the ice cream flavors that cost more than 2.0.
   Reference Mockaroo, LLC.</description>
    </item>
    
    <item>
      <title>03. Read SQL 👩‍🏫🧑‍🏫</title>
      <link>/10-advanced-sql/activities/day-01/03-read-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/03-read-sql/</guid>
      <description># Pandas import pandas as pd  # SQL Alchemy from sqlalchemy import create_engine  database_path = &amp;#34;./Resources/Census_Data.sqlite&amp;#34;  # Create Engine engine = create_engine(f&amp;#34;sqlite:///{database_path}&amp;#34;) conn = engine.connect()  # Query All Records in the the Database data = pd.read_sql(&amp;#34;SELECT * FROM Census_Data&amp;#34;, conn) # Preview the Data data.head() </description>
    </item>
    
    <item>
      <title>04. Read All the SQLs 👩‍🎓👨‍🎓</title>
      <link>/10-advanced-sql/activities/day-01/04-read-all-the-sqls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/04-read-all-the-sqls/</guid>
      <description>In this activity, you will query an external server by using Pandas and SQLAlchemy to create new DataFrames on U.S. Census data.
Instructions   Create an engine to connect to the Census database.
  Query all the data from the Census_Data table, and load it into Pandas.
  Create an engine to connect to the zip database.
  Query all the data from the Zip_Census table, and load it in Pandas.</description>
    </item>
    
    <item>
      <title>05. Preview SQL Alchemy 👩‍🏫🧑‍🏫</title>
      <link>/10-advanced-sql/activities/day-01/05-preview-sql-alchemy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/05-preview-sql-alchemy/</guid>
      <description># Dependencies # ---------------------------------- from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base Base = declarative_base() from sqlalchemy import Column, Integer, String, Float  # Create Dog and Cat Classes # ---------------------------------- class Dog(Base):  __tablename__ = &amp;#39;dog&amp;#39;  id = Column(Integer, primary_key=True)  name = Column(String(255))  color = Column(String(255))  age = Column(Integer)  class Cat(Base):  __tablename__ = &amp;#39;cat&amp;#39;  id = Column(Integer, primary_key=True)  name = Column(String(255))  color = Column(String(255))  age = Column(Integer)  # Create a Specific Instance of the Dog and Cat classes # ---------------------------------- dog = Dog(name=&amp;#34;Fido&amp;#34;, color=&amp;#39;Brown&amp;#39;, age=4) cat = Cat(name=&amp;#34;Whiskers&amp;#34;, color=&amp;#34;Gray&amp;#34;, age=7)  # Create Database Connection # ---------------------------------- database_path = &amp;#34;pets_db&amp;#34; engine = create_engine(f&amp;#34;sqlite:///{database_path}&amp;#34;) conn = engine.</description>
    </item>
    
    <item>
      <title>06. Classes 👩‍🏫🧑‍🏫</title>
      <link>/10-advanced-sql/activities/day-01/06-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/06-classes/</guid>
      <description># Define a class class Dog():   # Utilize the Python constructor to initialize the object  def __init__(self, name, color):  self.name = name  self.color = color # Create an instance of a class dog = Dog(&amp;#39;Fido&amp;#39;, &amp;#39;brown&amp;#39;) # Print the object&amp;#39;s attributes print(dog.name) print(dog.color) </description>
    </item>
    
    <item>
      <title>07. Surfer Class 👩‍🎓👨‍🎓</title>
      <link>/10-advanced-sql/activities/day-01/07-surfer-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/07-surfer-class/</guid>
      <description>In this activity, you will create your own classes in Python.
Instructions   Create a class, Surfer, and initialize it with name, hometown, and rank-instance variables.
  Create an instance of a surfer.
  Then, print the name, hometown, and rank of your surfer object.
  Bonus   Create a while loop that will allow you to continuously create new instances of surfers using input().</description>
    </item>
    
    <item>
      <title>08. Classes With Methods 👩‍🏫🧑‍🏫</title>
      <link>/10-advanced-sql/activities/day-01/08-classes-with-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/08-classes-with-methods/</guid>
      <description># Define the Film class class Film():   # A required function to initialize the class object  def __init__(self, name, length, release_year, language):  self.name = name  self.length = length  self.release_year = release_year  self.language = language # An object belonging to the Film class star_wars = Film(&amp;#34;Star Wars&amp;#34;, 121, 1977, &amp;#34;English&amp;#34;)   # Define the Expert class class Expert():   # A required function to initialize the class object  def __init__(self, name):  self.</description>
    </item>
    
    <item>
      <title>09. Surfer Class Extended 👩‍🎓👨‍🎓 </title>
      <link>/10-advanced-sql/activities/day-01/09-surfer-class-extended/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/09-surfer-class-extended/</guid>
      <description>In this activity, you will rework your Surfer script as you add in methods to perform specific tasks.
Instructions   Create a Surfer class that has name, hometown, rank, and wipeouts instance variables.
  Create a method called speak that prints &amp;ldquo;Hang loose, bruh!&amp;rdquo;
  Create a method called biography that prints the surfer&amp;rsquo;s name and hometown.
  Create a method called cheer that will print &amp;ldquo;I totally rock man, no wipeouts!</description>
    </item>
    
    <item>
      <title>10. SQL Alchemy Revisited 👩‍🏫🧑‍🏫</title>
      <link>/10-advanced-sql/activities/day-01/10-sql-alchemy-revisited/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/10-sql-alchemy-revisited/</guid>
      <description># Dependencies # ---------------------------------- # Imports the method used for connecting to DBs from sqlalchemy import create_engine  # Imports the methods needed to abstract classes into tables from sqlalchemy.ext.declarative import declarative_base  # Allow us to declare column types from sqlalchemy import Column, Integer, String, Float  # Create Dog and Cat Classes # ----------------------------------  # Sets an object to utilize the default declarative base in SQL Alchemy Base = declarative_base()  # Creates Classes which will serve as the anchor points for our Tables class Dog(Base):  __tablename__ = &amp;#39;dog&amp;#39;  id = Column(Integer, primary_key=True)  name = Column(String(255))  color = Column(String(255))  age = Column(Integer)   class Cat(Base):  __tablename__ = &amp;#39;cat&amp;#39;  id = Column(Integer, primary_key=True)  name = Column(String(255))  color = Column(String(255))  age = Column(Integer)  # Create a Specific Instance of the Dog and Cat classes # ----------------------------------  # Calls the Pet Constructors to create &amp;#34;Dog&amp;#34; and &amp;#34;Cat&amp;#34; objects dog = Dog(name=&amp;#39;Rex&amp;#39;, color=&amp;#39;Brown&amp;#39;, age=4) cat = Cat(name=&amp;#34;Felix&amp;#34;, color=&amp;#34;Gray&amp;#34;, age=7)  # Create Database Connection # ---------------------------------- # Creates a connection to our DB engine = create_engine(&amp;#34;sqlite:///pets.</description>
    </item>
    
    <item>
      <title>11. Surfer SQL 👩‍🎓👨‍🎓</title>
      <link>/10-advanced-sql/activities/day-01/11-surfer-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-advanced-sql/activities/day-01/11-surfer-sql/</guid>
      <description>In today’s final activity, you will test your SQLAlchemy skills and update your Surfer database.
Instructions   Modify the Surfer class created during the previous activity so that it will function with SQLAlchemy. Use the following parameters:
  __tablename__ should be &amp;ldquo;surfers&amp;rdquo;.
  surfer_id should be an integer and the primary key.
  name should be a string capable of holding 255 characters.
  hometown should be a string capable of holding 255 characters.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>matplotlib on </title>
    <link>/tags/matplotlib/</link>
    <description>Recent content in matplotlib on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="/tags/matplotlib/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01. Basic Line Graphs 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-01/01-basic-line-graphs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/01-basic-line-graphs/</guid>
      <description>exponential chart  # Import Numpy for calculations and matplotlib for charting import numpy as np import matplotlib.pyplot as plt # Creates a numpy array from 0 to 5 with each step being 0.1 higher than the last x_axis = np.arange(0, 5, 0.1) x_axis  # Creates an exponential series of values which we can then chart e_x = [np.exp(x) for x in x_axis] e_x  # Create a graph based upon the list and array we have created plt.</description>
    </item>
    
    <item>
      <title>01. Plots Review  👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-02/01-plot-review/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/01-plot-review/</guid>
      <description>PyPlot Warmup In this activity, you will use PyPlot to create the most effective visualization for a variety of datasets.
Instructions   Examine the starter code for each dataset.
  Determine what chart or plot fits with the starter code for each dataset.
  Complete the code block to create a plot for each of the datasets.
  Be sure to provide each plot with a title and labels.</description>
    </item>
    
    <item>
      <title>01. Summary Statistics 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-03/01-summary-statistics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-03/01-summary-statistics/</guid>
      <description># Dependencies import pandas as pd import matplotlib.pyplot as plt import scipy.stats as st import numpy as np # Read in the LAX temperature data temperature_df = pd.read_csv(&amp;#39;../Resources/lax_temperature.csv&amp;#39;) temperatures = temperature_df[&amp;#39;HourlyDryBulbTemperature&amp;#39;] # Demonstrate calculating measures of central tendency mean_numpy = np.mean(temperatures) print(f&amp;#34;The mean temperature at the LAX airport is {mean_numpy}&amp;#34;)  median_numpy = np.median(temperatures) print(f&amp;#34;The median temperature at the LAX airport is {median_numpy}&amp;#34;)  mode_scipy = st.mode(temperatures) print(f&amp;#34;The mode temperature at the LAX airport is {mode_scipy}&amp;#34;)  # Characterize the data set using matplotlib and stats.</description>
    </item>
    
    <item>
      <title>Activities ✅</title>
      <link>/05-data-visualization/activities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/</guid>
      <description>Video Speed Run of the Activities if you get stuck or miss class
📺 Matplotlib Activities Video Speed Runs 🏃‍♀️🏃    Day Mac 🍎 Duration Window 🖼️ Duration     01 Video 📺 00:43:42 ⏲️ Video 📺 00:43:42 ⏲️   02 Video 📺 00:54:03 ⏲️ Video 📺 00:54:03 ⏲️   03 Video 📺 00:44:34 ⏲️ Video 📺 00:44:34 ⏲️    Activities Required ✅ ⬆️ Back to Top Instructor Turn = 👩‍🏫🧑‍🏫 Students Turn = 👩‍🎓👨‍🎓</description>
    </item>
    
    <item>
      <title>Day 1</title>
      <link>/05-data-visualization/activities/day-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/</guid>
      <description>5.1: Introduction to Matplotlib Overview Today&amp;rsquo;s class will introduce the students to the basics of Matplotlib, one of the most popular Python plotting libraries in use today. This lesson plan focuses on how to import the Matplotlib library and use its core PyPlot module to design and customize line, bar, and pie charts as well as scatter plots. Today will also serve as a refresher of data visualizations, which were introduced in Unit 1.</description>
    </item>
    
    <item>
      <title>Day 2</title>
      <link>/05-data-visualization/activities/day-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/</guid>
      <description>5.2: Plotting with Pandas Overview Today&amp;rsquo;s lesson introduces the students to Pandas plotting, a quick and effective means for creating charts from DataFrames.
Class Objectives By the end of this lesson, the students will be able to:
  Create plots by using the DataFrame.plot() method.
  Explain the advantages and disadvantages of creating charts by using the DataFrame.plot() method.
  Use Pandas to analyze a complex dataset and chart the visualizations.</description>
    </item>
    
    <item>
      <title>Day 3</title>
      <link>/05-data-visualization/activities/day-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-03/</guid>
      <description>5.3: Introduction to Statistics Overview In today’s class, the students will review the summary statistics that were previously taught in Unit 1, and the implementation of these statistical measures in Python. This lesson also introduces new statistical concepts, such as sample versus population, standard error, Pearson correlation coefficient, and linear regression.
Class Objectives By the end of this lesson, the students will be able to:
  Calculate summary statistics, such as mean, median, mode, variance, and standard deviation, by using Python.</description>
    </item>
    
    <item>
      <title>Module 5 Challenge ⭐</title>
      <link>/05-data-visualization/challenges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/challenges/</guid>
      <description>What good is data without a good plot to tell the story?
In this assignment, you’ll apply what you&amp;rsquo;ve learned about Matplotlib to a real-world situation and dataset.
Background You&amp;rsquo;ve just joined Pymaceuticals, Inc., a new pharmaceutical company that specializes in anti-cancer medications. Recently, it began screening for potential treatments for squamous cell carcinoma (SCC), a commonly occurring form of skin cancer.
As a senior data analyst at the company, you&amp;rsquo;ve been given access to the complete data from their most recent animal study.</description>
    </item>
    
    <item>
      <title>02. NJ Templ Line Plots 👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-01/02-nj-temp-line-plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/02-nj-temp-line-plots/</guid>
      <description>New Jersey Weather In this activity, you will visualize the differences between temperature recorded in degrees Fahrenheit versus degrees Celsius.
Instructions   Using the following data, plot the monthly averages for temperature in New Jersey in both degrees Fahrenheit and degrees Celsius.
 Average temperature per month in Fahrenheit: 39, 42, 51, 62, 72, 82, 86, 84, 77, 65, 55, 44.    Assign to the x-axis a range of numerical values representing each month of the year.</description>
    </item>
    
    <item>
      <title>02. Pandas plot 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-02/02-pandas-plot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/02-pandas-plot/</guid>
      <description>%matplotlib notebook # Dependencies import matplotlib.pyplot as plt import numpy as np import pandas as pd  ## Using MatplotLib to Chart a DataFrame # Load in csv rain_df = pd.read_csv(&amp;#34;../Resources/avg_rain_state.csv&amp;#34;) rain_df.head()  # Set x axis and tick locations x_axis = np.arange(len(rain_df)) tick_locations = [value for value in x_axis]  # Create a list indicating where to write x labels and set figure size to adjust for space plt.</description>
    </item>
    
    <item>
      <title>02. Quartiles and Outliers 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-03/02-quartiles-and-outliers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-03/02-quartiles-and-outliers/</guid>
      <description># Dependencies import pandas as pd import numpy as np import matplotlib.pyplot as plt # Example outlier plot of reaction times times = [96,98,100,105,85,88,95,100,101,102,97,98,5] fig1, ax1 = plt.subplots() ax1.set_title(&amp;#39;Reaction Times at Baseball Batting Cage&amp;#39;) ax1.set_ylabel(&amp;#39;Reaction Time (ms)&amp;#39;) ax1.boxplot(times) plt.show()  # We need to sort the data to determine which could be outliers times.sort() print(times)  # The second example again looks at the LAX temperature data set and computes quantiles temperature_df = pd.</description>
    </item>
    
    <item>
      <title>03. Configuring Line Plots 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-01/03-configuring-line-plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/03-configuring-line-plots/</guid>
      <description>%matplotlib notebook # Dependencies import matplotlib.pyplot as plt import numpy as np # Set x axis and variables x_axis = np.arange(0, 10, 0.1) sin = np.sin(x_axis) cos = np.cos(x_axis) # Draw a horizontal line with 0.25 transparency plt.hlines(0, 0, 10, alpha=0.25)   # Assign plots to tuples that stores result of plot  # Each point on the sine chart is marked by a blue circle sine_handle, = plt.</description>
    </item>
    
    <item>
      <title>03. Group Plots 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-02/04-group-plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/04-group-plots/</guid>
      <description>%matplotlib notebook  # Import Dependencies import matplotlib.pyplot as plt import pandas as pd # Import our data into pandas from CSV accident_string = &amp;#39;../Resources/accidents.csv&amp;#39; accidents_df = pd.read_csv(accident_string, low_memory=False)  accidents_df  # Create a group based on the values in the &amp;#39;FUNC_SYSNAME&amp;#39; column # &amp;#39;FUNC_SYSNAME&amp;#39; stores the type of road the accident occurred accident_road_type = accidents_df.groupby(&amp;#39;FUNC_SYSNAME&amp;#39;)  # Count how many times each road type appears in our group count_road_types = accident_road_type[&amp;#39;FUNC_SYSNAME&amp;#39;].</description>
    </item>
    
    <item>
      <title>03. Settlements Plotting Pandas 👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-02/03-settlements-plotting-pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/03-settlements-plotting-pandas/</guid>
      <description>Union Settlements In this activity, you will use a dataset of 523 partial records, reduced from 13,758 total records, about major collective bargaining settlements in 1995. The Access to Archival Databases (AAD) limits downloads to 1,000 records, so this collection was reduced to the following unions: Actors Equity Association (AEA), Air Line Pilots (ALPA), Auto Workers (UAW), Bakery, Confectionery Workers International Union of America (BCW), Clothing and Textile Workers (ACTWU), and Elevator Constructors (IUEC).</description>
    </item>
    
    <item>
      <title>03. Summary Statistics 👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-03/03-summary-statistics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-03/03-summary-statistics/</guid>
      <description>Summary Statistics in Python In this activity, you will be tasked with calculating a number of summary statistics using California housing data.
Instructions   Using Pandas, import the California housing dataset from the Resources folder.
  Determine the most appropriate measure of central tendency to describe the population, and then calculate this value.
  Use both data visualization and a quantitative measurement to find whether the age of houses in California is considered normally distributed using a small and large portion of the dataset.</description>
    </item>
    
    <item>
      <title>04. Legendary Temperature 👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-01/04-legendary-temperature/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/04-legendary-temperature/</guid>
      <description>Legendary Temperature In this activity, you will expand upon your temperature plots to add a legend.
Instructions   Modify the New Jersey temperature line charts from earlier so that they match the image provided.
  Once the plot has been created, check the Matplotlib documentation to see what additional formatting could be added to the chart.
   ✅ Solutions   Solutions Click Here    # Include this line to make plots interactive %matplotlib notebook # Dependencies import matplotlib.</description>
    </item>
    
    <item>
      <title>04. Standard Error 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-03/04-standard-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-03/04-standard-error/</guid>
      <description># Dependencies import pandas as pd import random import matplotlib.pyplot as plt import numpy as np from scipy.stats import sem  # Set the seed so our data is reproducible random.seed(42) # Sample versus population example fuel economy fuel_economy = pd.read_csv(&amp;#39;../Resources/2019_fuel_economy.csv&amp;#39;)  # First overview the data set - how many factors, etc. print(fuel_economy.head())  # Calculate the summary statistics and plot the histogram of the entire population data print(f&amp;#34;The mean MPG of all vehicles is: {round(fuel_economy[&amp;#39;Combined_MPG&amp;#39;].</description>
    </item>
    
    <item>
      <title>05. Aesthetics 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-01/05-aesthetics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/05-aesthetics/</guid>
      <description>%matplotlib notebook  # Dependencies import matplotlib.pyplot as plt import numpy as np # Generate the x values from 0 to 10 using a step of 0.1 x_axis = np.arange(0, 10, 0.1) sin = np.sin(x_axis) cos = np.cos(x_axis) # Add a semi-transparent horizontal line at y = 0 plt.hlines(0, 0, 10, alpha=0.25)   # Use dots or other markers for your plots, and change their colors plt.plot(x_axis, sin, linewidth=0, marker=&amp;#34;o&amp;#34;, color=&amp;#34;blue&amp;#34;) plt.</description>
    </item>
    
    <item>
      <title>05. Library Usage Groupby  👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-02/05-library-usage-groupby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/05-library-usage-groupby/</guid>
      <description>Library Usage In this activity, you will create a pair of charts based on library usage collected from San Francisco. This dataset includes information on library patrons who became patrons of San Francisco Public Library between 2003 and 2016, and tracks their total library usage during that period.
Instructions   Open the starter file and follow the prompts to import, split, and summarize the library dataset.
  Create a bar chart by using Pandas and Matplotlib that visualizes how many patrons checked out items by patron type.</description>
    </item>
    
    <item>
      <title>05. SEM and Error Bars 👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-03/05-sem-error-bars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-03/05-sem-error-bars/</guid>
      <description>SEM and Error Bars In this activity, you will work with a partner to characterize sample data from a California housing dataset. Make sure to compare your calculated values as you progress through the activity.
Instructions Work with a partner on this activity. Be sure to compare your calculated values as you progress through the activity.
  Execute the starter code to import the California housing dataset from Scikit-learn.</description>
    </item>
    
    <item>
      <title>06. Correlation Conundrum 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-03/06-correlation-conundrum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-03/06-correlation-conundrum/</guid>
      <description># Dependencies import pandas as pd import matplotlib.pyplot as plt import scipy.stats as st # Import the WDI dataset, drop missing data wdi_data = pd.read_csv(&amp;#39;../Resources/WDI_2018.csv&amp;#39;) wdi_data = wdi_data.dropna() wdi_data.head() 	# For the first example, determine which pairs of factors are correlated.  plt.scatter(wdi_data.iloc[:,1],wdi_data.iloc[:,8]) plt.xlabel(&amp;#39;Income Per Capita&amp;#39;) plt.ylabel(&amp;#39;Average Alcohol Consumed Per Person Per Year (L)&amp;#39;) plt.show()  plt.scatter(wdi_data.iloc[:,3],wdi_data.iloc[:,10]) plt.xlabel(&amp;#39;Population Median Age&amp;#39;) plt.ylabel(&amp;#39;Cell Phones Per 100 People&amp;#39;) plt.show()  plt.scatter(wdi_data.iloc[:,9],wdi_data.iloc[:,7]) plt.</description>
    </item>
    
    <item>
      <title>06. Miles Per Gallon ScatterPlot  👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-02/06-miles-per-gallon-scatterplot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/06-miles-per-gallon-scatterplot/</guid>
      <description>Miles Per Gallon In this activity, you will create a scatter plot by using vehicle data, Pandas, and Matplotlib.
Instructions Create a scatter plot by using the data provided Pandas, and Matplotlib, that compares the miles per gallon of a vehicle with its horsepower. Use the following image as guidance:
References Auto MPG Dataset
 ✅ Solutions   Solutions Click Here      </description>
    </item>
    
    <item>
      <title>06. Roller Coaster Styling 👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-01/06-rollercoaster-styling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/06-rollercoaster-styling/</guid>
      <description>Coaster Speed In this activity, you will create a line chart that graphs the speed of a roller coaster over time. You will then style the chart and add aesthetics to it.
Instructions   Create a visualization with two line plots using the following data:
  Danger Drop: [9, 8, 90, 85, 80, 70, 70, 65, 55, 60, 70, 65, 50]
  RailGun: [75, 70, 60, 65, 60, 45, 55, 50, 40, 40, 35, 35, 30]</description>
    </item>
    
    <item>
      <title>07. Barcharts 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-01/07-barcharts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/07-barcharts/</guid>
      <description>%matplotlib notebook import matplotlib.pyplot as plt import numpy as np  # Create an array that contains the number of users each language has users = [13000, 26000, 52000, 30000, 9000] x_axis = np.arange(len(users))  # Tell matplotlib that we will be making a bar chart # Users is our y axis and x_axis is, of course, our x axis # We apply align=&amp;#34;edge&amp;#34; to ensure our bars line up with our tick marks plt.</description>
    </item>
    
    <item>
      <title>07. Correlation_Conquerors 👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-03/07-correlation-conquerors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-03/07-correlation-conquerors/</guid>
      <description>✅ Solutions   Solutions Click Here      </description>
    </item>
    
    <item>
      <title>07. Pandas Multi Line 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-02/07-pandas-multi-line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/07-pandas-multi-line/</guid>
      <description># Dependencies import matplotlib.pyplot as plt import numpy as np import pandas as pd # Read CSV unemployed_data_one = pd.read_csv(&amp;#34;../Resources/unemployment_2010-2015.csv&amp;#34;) unemployed_data_two = pd.read_csv(&amp;#34;../Resources/unemployment_2016-2020.csv&amp;#34;)  # Merge our two data frames together combined_unemployed_data = pd.merge(unemployed_data_one, unemployed_data_two, on=&amp;#34;Country Name&amp;#34;) combined_unemployed_data.head()  # Delete the duplicate &amp;#39;Country Code&amp;#39; column and rename the first one back to &amp;#39;Country Code&amp;#39; del combined_unemployed_data[&amp;#39;Country Code_y&amp;#39;] combined_unemployed_data = combined_unemployed_data.rename(columns={&amp;#34;Country Code_x&amp;#34;:&amp;#34;Country Code&amp;#34;}) combined_unemployed_data.head() 	# Set the &amp;#39;Country Code&amp;#39; to be our index for easy referencing of rows combined_unemployed_data = combined_unemployed_data.</description>
    </item>
    
    <item>
      <title>08. Fits and Regression 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-03/08-fits-and-regression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-03/08-fits-and-regression/</guid>
      <description># Import dependencies from matplotlib import pyplot as plt from scipy.stats import linregress import numpy as np from sklearn import datasets import pandas as pd  # Read in the California housing dataset california_dataset = datasets.fetch_california_housing() housing_data = pd.DataFrame(data=california_dataset.data,columns=california_dataset.feature_names) housing_data[&amp;#39;MEDV&amp;#39;] = california_dataset.target # Reduce the dataset to remove AveRooms outliers housing_data_reduced = pd.DataFrame(housing_data.loc[housing_data[&amp;#39;AveRooms&amp;#39;]&amp;lt;10,:])  # Reduce the dataset to the San Diego Area (based on approx latitude &amp;amp; longitude area) san_diego_housing = pd.</description>
    </item>
    
    <item>
      <title>08. PyBars  👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-01/08-pybars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/08-pybars/</guid>
      <description>Cars Bar Chart In this activity, you will create a bar chart that visualizes the commuting cars per 1,000 population aged 16 and over within major U.S. cities.
Instructions create a bar chart that matches the following image:
  Title: Density of Commuting Cars in Cities
  x-axis label: Cities
  x-tick labels: San Francisco, Omaha, New Orleans, Cincinnati, Pittsburgh
  y-axis label: Commuting Cars Per 1,000 Population Age 16+</description>
    </item>
    
    <item>
      <title>08. Traveling Companions  Part 1  👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-02/08-traveling-companion-part-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/08-traveling-companion-part-1/</guid>
      <description>Traveling Companions, Part 1 This is Part 1 of a three-part mini-project.
In this first part of the activity, you will take three separate CSVs that were gathered from Tourism Malaysia, merge them together, and then create charts to visualize a comparison of travelers to Malaysia from different countries of origin over three years.
Instructions   Check the comments in each cell of this Jupyter Notebook file for activity instructions.</description>
    </item>
    
    <item>
      <title>09. Fits and Regression 👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-03/09-fits-and-regression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-03/09-fits-and-regression/</guid>
      <description>Fits and Regression This activity is an opportunity to use SciPy to fit data and Matplotlib to display the fit.
Instructions   Generate a scatter plot with Matplotlib using the year as the independent (x) variable and the number of petrol-electric cars as the dependent (y) variable.
  Use stats.linregress to perform a linear regression with the year as the independent variable (x) and the number of petrol-electric cars as the dependent variable (y).</description>
    </item>
    
    <item>
      <title>09. Pie Charts 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-01/09-piecharts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/09-piecharts/</guid>
      <description>%matplotlib notebook # Import our dependencies  import matplotlib.pyplot as plt import numpy as np # Labels for the sections of our pie chart labels = [&amp;#34;Humans&amp;#34;, &amp;#34;Smurfs&amp;#34;, &amp;#34;Hobbits&amp;#34;, &amp;#34;Ninjas&amp;#34;]  # The values of each section of the pie chart sizes = [220, 95, 80, 100]  # The colors of each section of the pie chart colors = [&amp;#34;red&amp;#34;, &amp;#34;orange&amp;#34;, &amp;#34;lightcoral&amp;#34;, &amp;#34;lightskyblue&amp;#34;]  # Tells matplotlib to separate the &amp;#34;Humans&amp;#34; section from the others explode = (0.</description>
    </item>
    
    <item>
      <title>09. Traveling Companions  Part 2  👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-02/09-traveling-companion-part-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/09-traveling-companion-part-2/</guid>
      <description>Traveling Companions, Part 2 This is Part 2 of a three-part mini-project.
In this second part, you will examine the averages of each column and reduce the DataFrame to include only types of companion travelers that are above 1% across all three years.
Instructions  Your final table should align with the following table:  References Tourism Malaysia
 ✅ Solutions   Solutions Click Here    # Check the mean of the columns combined_travel_df.</description>
    </item>
    
    <item>
      <title>10. Pypies  👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-01/10-pypies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/10-pypies/</guid>
      <description>Pies Pie Chart In this activity, you will create a pie chart that visualizes pie flavor preferences in the United States.
Instructions Using the starter file, create a pie chart that matches the following image:
  Include all of the lists provided in the starter file: pies, pie_votes, colors, explode.
  Display the popularity percentages to one decimal place.
  Include a shadow, and determine the starting angle so the exploded pie piece is in the middle left section of the pie.</description>
    </item>
    
    <item>
      <title>10. Traveling Companions  Part 3  👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-02/10-traveling-companion-part-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-02/10-traveling-companion-part-3/</guid>
      <description>Traveling Companions, Part 3 This is the third and final part of a three-part mini-project.
In this final part, you will take the DataFrame you created and, using Matplotlib, chart a comparison of three different countries for one type of traveling companion between 2016 and 2018.
Instructions   Check the comments in each cell of this Jupyter Notebook file for activity instructions.
  Your output should align with the following figure, depending on the user’s input variable:</description>
    </item>
    
    <item>
      <title>11. Scatter Plots 👩‍🏫🧑‍🏫</title>
      <link>/05-data-visualization/activities/day-01/11-scatter-plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/11-scatter-plots/</guid>
      <description>%matplotlib notebook # Import Dependencies import random import matplotlib.pyplot as plt import numpy as np # The maximum x value for our chart will be 100 x_limit = 100  # List of values from 0 to 100 each value being 1 greater than the last x_axis = np.arange(0, x_limit, 1)  # Create a random array of data that we will use for our y values data = [random.</description>
    </item>
    
    <item>
      <title>12. Scatter Py 👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-01/12-scatterpy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/12-scatterpy/</guid>
      <description>Scatter Py In this activity, you will create a scatter plot that visualizes ice cream sales in comparison to temperature increases.
Instructions Create a scatter plot that matches the following image:
Bonus Create a new list called scoop_price, fill it with values, and then set it so that the size of the dots are set according to those values.
 ✅ Solutions   Solutions Click Here    %matplotlib notebook import matplotlib.</description>
    </item>
    
    <item>
      <title>13. Average Rain Bar Charts 👩‍🎓👨‍🎓</title>
      <link>/05-data-visualization/activities/day-01/13-avg-rain-bar-charts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-data-visualization/activities/day-01/13-avg-rain-bar-charts/</guid>
      <description>Average Rainfall In this activity, you will create a bar chart that shows the average rainfall in different states by importing data from a CSV file.
Instructions  Review the raw data (resources/avg_rain_state.csv) in the Resources folder. This dataset contains the average rainfall per state in any given year.  *Ggenerate a plot that shows the average rainfall per state, as per image below:
Hint   Think critically about the different plots we discussed today.</description>
    </item>
    
  </channel>
</rss>

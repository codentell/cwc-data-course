<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apis on </title>
    <link>/tags/apis/</link>
    <description>Recent content in apis on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="/tags/apis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01. Geoapify Geocode  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-03/01-geoapify-geocode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-03/01-geoapify-geocode/</guid>
      <description># Dependencies import requests import json  # Import the API key from config import geoapify_key # Target city target_city = &amp;#34;Sydney, Australia&amp;#34;  # Build the endpoint URL target_url = f&amp;#34;https://api.geoapify.com/v1/geocode/search?text={target_city}&amp;amp;format=json&amp;amp;apiKey={geoapify_key}&amp;#34; target_url &amp;#39;https://api.geoapify.com/v1/geocode/search?text=Sydney, Australia&amp;amp;format=json&amp;amp;apiKey=7757f89767bc454db74be2b640389f77&amp;#39; # Run a request to endpoint and convert result to json geo_data = requests.get(target_url).json()  # Print the json print(geo_data)  # Print the json (pretty printed) print(json.dumps(geo_data, indent=4, sort_keys=True))  # Extract latitude and longitude lat = geo_data[&amp;#34;results&amp;#34;][0][&amp;#34;lat&amp;#34;] lon = geo_data[&amp;#34;results&amp;#34;][0][&amp;#34;lon&amp;#34;]  # Print the latitude and longitude print(&amp;#39;&amp;#39;&amp;#39; City: {0}Latitude: {1}Longitude: {2}&amp;#39;&amp;#39;&amp;#39;.</description>
    </item>
    
    <item>
      <title>01. JSON Traversal Review 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/01-json-traversal-review/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/01-json-traversal-review/</guid>
      <description>JSON Traversal Review This activity is an opportunity to practice loading and parsing JSON in Python.
Instructions   Load the provided JSON.
  Retrieve the video&amp;rsquo;s title.
  Retrieve the video&amp;rsquo;s rating.
  Retrieve the link to the video&amp;rsquo;s first tag.
  Retrieve the number of views for the video.
  References Data Source: Data for this dataset was generated by edX Boot Camps LLC, and is intended for educational purposes only.</description>
    </item>
    
    <item>
      <title>01. Request Intro  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-01/01-requests-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/01-requests-intro/</guid>
      <description># Dependencies import requests import json   # URL for GET requests to retrieve vehicle data url = &amp;#34;https://api.spacexdata.com/v4/launchpads&amp;#34; # Print the response object to the console print(requests.get(url))  # Retrieving data and converting it into JSON print(requests.get(url).json())  # Pretty Print the output of the JSON response = requests.get(url).json() print(json.dumps(response, indent=4, sort_keys=True)) </description>
    </item>
    
    <item>
      <title>Activities ✅</title>
      <link>/06-python-apis/activities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/</guid>
      <description>Video Speed Run of the Activities if you get stuck or miss class
📺 Python APIs Activities Video Speed Runs 🏃‍♀️🏃    Day Mac 🍎 Duration Window 🖼️ Duration     01 Video 📺 00:48:09 ⏲️ Video 📺 00:48:09 ⏲️   02 Video Part 1 📺 Video Part 2 📺 Part 1 00::21:22 ⏲️ Part 2 00::15:15 ⏲️ Video Part 1 📺 Video Part 2 📺 00::21:22 ⏲️ Part 2 00::15:15 ⏲️   03 Video Part 1 📺 Video Part 2 📺 00:37:50 ⏲️ 00:12:08 ⏲️ Video Part 1 📺 Video Part 2 📺 00:37:50 ⏲️ 00:12:08 ⏲️    Activities Required ✅ ⬆️ Back to Top Instructor Turn = 👩‍🏫🧑‍🏫 Students Turn = 👩‍🎓👨‍🎓</description>
    </item>
    
    <item>
      <title>Day 1</title>
      <link>/06-python-apis/activities/day-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/</guid>
      <description>6.1 APIs Overview In today’s lesson, students will be introduced to JSON traversal and the fundamentals of making API requests with the Requests library, using the OMDb and New York Times APIs.
Class Objectives By the end of this lesson, the students will be able to:
  Make get requests with the Request library.
  Convert JSON into a Python dictionary.
  Read and apply API documentation.</description>
    </item>
    
    <item>
      <title>Day 1</title>
      <link>/07-project-1-part-1/activities/day-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/07-project-1-part-1/activities/day-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Day 2</title>
      <link>/06-python-apis/activities/day-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/</guid>
      <description>6.2: Working with Weather and City APIs Overview In today’s class, we’ll introduce a variety of new APIs while also covering exception handling and the use of Pandas with API responses.
Class Objectives By the end of this lesson, the students will be able to:
  Create applications from scratch by using nothing but their knowledge of Python and an API’s documentation.
  Load JSON from API responses into a Pandas DataFrame.</description>
    </item>
    
    <item>
      <title>Day 2</title>
      <link>/07-project-1-part-1/activities/day-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/07-project-1-part-1/activities/day-02/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Day 3</title>
      <link>/06-python-apis/activities/day-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-03/</guid>
      <description>6.3 APIs and Geospatial Data Visualization Overview In this class, the students will be introduced to the Geoapify API and the GeoViews Python library. Using these new tools, along with data from the U.S. Census, students will be tasked with creating visualizations to capture the socioeconomic trend of banking deserts.
Class Objectives By the end of this lesson, the students will be able to:
  Use the Geoapifi API to obtain information about geographic areas.</description>
    </item>
    
    <item>
      <title>Day 3</title>
      <link>/07-project-1-part-1/activities/day-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/07-project-1-part-1/activities/day-03/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Module 6 Challenge ⭐</title>
      <link>/06-python-apis/challenges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/challenges/</guid>
      <description>Background Data&amp;rsquo;s true power is its ability to definitively answer questions. So, let&amp;rsquo;s take what you&amp;rsquo;ve learned about Python requests, APIs, and JSON traversals to answer a fundamental question: &amp;ldquo;What is the weather like as we approach the equator?&amp;rdquo;
Now, we know what you may be thinking: “That’s obvious. It gets hotter.” But, if pressed for more information, how would you prove that?
Before You Begin   Create a new repository for this project called python-api-challenge.</description>
    </item>
    
    <item>
      <title>02. 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-01/02-spacex-request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/02-spacex-request/</guid>
      <description>Requesting SpaceX In this activity, you will dig into a simple, well-documented API—The SpaceX API—and make calls to the API using the Requests library.
Instructions   Take a few minutes to explore the SpaceX V3 API:
  GitHub
  API Documentation
    Once you understand the structure of the API and its endpoint, choose one of the endpoints and do the following:
  Retrieve and print the JSON for all of the records from your chosen endpoint.</description>
    </item>
    
    <item>
      <title>02. Geoapify Places  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-03/02-geoapify-places/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-03/02-geoapify-places/</guid>
      <description>Geoapify Places Demo # Dependencies import requests import json  # Import the API key from config import geoapify_key # Set the geographical coordinates for Sydney, Australia latitude = -33.8698439 longitude = 151.2082848  # Set the parameters for the type of place categories = &amp;#34;catering.restaurant&amp;#34; conditions = &amp;#34;vegetarian&amp;#34; radius = 8000  # Set the parameters for the type of search filters = f&amp;#34;circle:{longitude},{latitude},{radius}&amp;#34; bias = f&amp;#34;proximity:{longitude},{latitude}&amp;#34; limit = 20  # set up a parameters dictionary params = {  &amp;#34;categories&amp;#34;:categories,  &amp;#34;conditions&amp;#34;:conditions,  &amp;#34;limit&amp;#34;:limit,  &amp;#34;filter&amp;#34;:filters,  &amp;#34;bias&amp;#34;:bias,  &amp;#34;apiKey&amp;#34;:geoapify_key }  # Set base URL base_url = &amp;#34;https://api.</description>
    </item>
    
    <item>
      <title>02. Request Review👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/02-request-review/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/02-request-review/</guid>
      <description>Requests &amp;amp; Responses This activity provides practice making requests, converting the response to JSON, and then manipulating the result with Python.
Instructions   Make a request to the following endpoint (https://2u-data-curriculum-team.s3.amazonaws.com/dataviz-classroom/v1.1/06-Python-APIs/request_review.json), and store the response.
  Print the JSON representations of the first and last posts.
  Print number of posts received.
  References Data Source: Mockaroo, LLC. (2021). Realistic Data Generator. https://www.mockaroo.com/
 ✅ Solutions   Solutions Click Here    # Dependencies import json import requests from pprint import pprint # Specify the URL url = &amp;#34;https://2u-data-curriculum-team.</description>
    </item>
    
    <item>
      <title>03.  Geoapify Drills👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-03/03-geoapify-drills/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-03/03-geoapify-drills/</guid>
      <description>Geoapify Drills In this activity, you will perform API calls to the Geoapify places and geocoding endpoints.
Instructions  Complete each of the six drills articulated in the code provided in geoapify_drills.ipynb. Feel encouraged to look back at the previous examples, but know that you will have to consult the Geoapify API documentation.  Hints   See the Geoapify Geocoding Documentation.
  See the Geoapify Places Documentation.
   </description>
    </item>
    
    <item>
      <title>03. Manipulating Response  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-01/03-manipulating-responses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/03-manipulating-responses/</guid>
      <description># Dependencies import requests import json  # Performing a GET Request and saving the  # API&amp;#39;s response within a variable url = &amp;#34;https://api.spacexdata.com/v2/rockets/falcon9&amp;#34; response = requests.get(url) response_json = response.json() print(json.dumps(response_json, indent=4, sort_keys=True))  # It is possible to grab a specific value  # from within the JSON object print(response_json[&amp;#34;cost_per_launch&amp;#34;])  # It is also possible to perform some # analyses on values stored within the JSON object number_payloads = len(response_json[&amp;#34;payload_weights&amp;#34;]) print(f&amp;#34;There are {number_payloads}payloads.</description>
    </item>
    
    <item>
      <title>03. Open Weather Request  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-02/03-open-weather-request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/03-open-weather-request/</guid>
      <description> # Dependencies import json import requests from config import api_key # Save config information url = &amp;#34;http://api.openweathermap.org/data/2.5/weather?&amp;#34; city = &amp;#34;London&amp;#34;  # Build query URL query_url = url + &amp;#34;appid=&amp;#34; + api_key + &amp;#34;&amp;amp;q=&amp;#34; + city # Get weather data weather_response = requests.get(query_url) weather_json = weather_response.json()  # Get the temperature from the response print(f&amp;#34;The weather API responded with: {weather_json}.&amp;#34;) </description>
    </item>
    
    <item>
      <title>04. Burundi Weather App 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/04-burundi-weather-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/04-burundi-weather-app/</guid>
      <description>Weather in Bujumbura This activity gives students practice with making API calls and handling responses.
Instructions   Save all of your &amp;ldquo;config&amp;rdquo; information—i.e., your API key; the base URL; etc.—before moving on.
  Build your query URL.
  Hint: Check the documentation to figure out how to request temperatures in Celsius.
  Make your request, and save the API response.
  Retrieve the current temperature in Bujumbura from the JSON response.</description>
    </item>
    
    <item>
      <title>04. Nearest Restaurants  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-03/04-nearest-restaurants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-03/04-nearest-restaurants/</guid>
      <description></description>
    </item>
    
    <item>
      <title>04. Requesting a Galaxy Far Far Away 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-01/04-farfaraway-apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/04-farfaraway-apidata/</guid>
      <description>Requesting a Galaxy Far Far Away In this activity you will create an application that accesses data from the Star Wars API and prints out values from within it.
Instructions   Using the starter file provided, collect the following pieces of information from the Star Wars API.
  The name of the character
  The number of films they were in
  The name of their first starship</description>
    </item>
    
    <item>
      <title>05. Exploring Airports 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-03/05-exploring-airports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-03/05-exploring-airports/</guid>
      <description>Exploring Airports in Australia In this activity, you&amp;rsquo;ll be tasked with obtaining information about some Australian airports. You&amp;rsquo;ll be given a list of cities, and you&amp;rsquo;ll need to use the Geoapify Geocoding API and Geoapify Places API to obtain the airports&amp;rsquo; information.
Instructions   Using airports.ipynb as a starting point, use the Geoapify Geocoding API, the Geoapify Places API, and Python to create a script that retrieves information of some Australian airports in each of the cities found in Cities.</description>
    </item>
    
    <item>
      <title>05. Number Facts API 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-01/05-number-facts-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/05-number-facts-api/</guid>
      <description>Number Facts API In this activity, you’ll use Python to create a user-friendly way to get data from an API.
Instructions Using the Numbers API, create an application that takes in a user&amp;rsquo;s inputs and returns a number fact based upon it.
Hints   The URL to make your request must have ?json at its end so that the data format returned is JSON. The default response is pure text.</description>
    </item>
    
    <item>
      <title>05. Open Weather DataFrame  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-02/05-open-weather-data-frame/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/05-open-weather-data-frame/</guid>
      <description># Dependencies import matplotlib.pyplot as plt import requests import pandas as pd from config import api_key # Save config information. url = &amp;#34;http://api.openweathermap.org/data/2.5/weather?&amp;#34; units = &amp;#34;metric&amp;#34;  # Build partial query URL query_url = f&amp;#34;{url}appid={api_key}&amp;amp;units={units}&amp;amp;q=&amp;#34; cities = [&amp;#34;Paris&amp;#34;, &amp;#34;London&amp;#34;, &amp;#34;Oslo&amp;#34;, &amp;#34;Beijing&amp;#34;]  # set up lists to hold reponse info lat = [] temp = []  # Loop through the list of cities and perform a request for data on each for city in cities:  response = requests.</description>
    </item>
    
    <item>
      <title>06. Geoviews Maps  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-03/06-geoviews-maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-03/06-geoviews-maps/</guid>
      <description></description>
    </item>
    
    <item>
      <title>06. OMDb Requests  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-01/06-omdb-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/06-omdb-requests/</guid>
      <description>import requests import json from config import api_key # New Dependency! Use this to pretty print the JSON # https://docs.python.org/3/library/pprint.html from pprint import pprint # Note that the ?t= is a query param for the t-itle of the # movie we want to search for. url = &amp;#34;http://www.omdbapi.com/?t=&amp;#34; api_key = &amp;#34;&amp;amp;apikey=&amp;#34; + api_key # Performing a GET request similar to the one we executed # earlier response = requests.get(url + &amp;#34;Aliens&amp;#34; + api_key) # Converting the response to JSON, and printing the result.</description>
    </item>
    
    <item>
      <title>06. TV Rating DataFrame 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/06-tv-ratings-dataframe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/06-tv-ratings-dataframe/</guid>
      <description>TV Ratings In this activity, you will create an application that reads in a list of TV shows, makes multiple requests from an API to retrieve rating information, creates a Pandas DataFrame, and then visually displays the data.
Instructions   You may use the list of TV shows provided in the starter file or create your own.
  Request information on each TV show from the TVmaze API&amp;rsquo;s Show Search endpoint</description>
    </item>
    
    <item>
      <title>07. Airport Map 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-03/07-airport-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-03/07-airport-map/</guid>
      <description>Australian Airports Map In this activity, you will create a map based on Australian airports information that you generated before using the Geoapify API.
Instructions   Load airports&amp;rsquo; data into a Pandas DataFrame.
  Create a simple map using GeoViews by adding a point per airport and setting a fixed size at your convenience.
  Use GeoViews to create a custom map by setting values for color, size, and a title different than OSM.</description>
    </item>
    
    <item>
      <title>07. Explore OMDb API 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-01/07-explore-omdb-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/07-explore-omdb-api/</guid>
      <description>OMDb API In this activity, you’ll review the OMDb API documentation, and you’ll practice using the API.
Instructions Read the OMDb documentation, and make a few API calls to get some information about your favorite movie.
 ✅ Solutions   Solutions Click Here      </description>
    </item>
    
    <item>
      <title>07. Weather Stats 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/07-weather-stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/07-weather-stats/</guid>
      <description>Weather Statistics In this activity, you will perform a linear regression on weather data from select cities in the Northern Hemisphere, and you will use the results to predict the temperature in Florence, Italy.
Instructions   Using the starter file as a guide, complete the following steps:
  Create a scatter plot of Temperature vs. Latitude.
  Perform linear regression.
  Create a line equation for the regression.</description>
    </item>
    
    <item>
      <title>08. Census  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-03/08-census/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-03/08-census/</guid>
      <description></description>
    </item>
    
    <item>
      <title>08. Exception Handling  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-02/08-exception-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/08-exception-handling/</guid>
      <description>students = {  # Name : Age  &amp;#34;James&amp;#34;: 27,  &amp;#34;Sarah&amp;#34;: 19,  &amp;#34;Jocelyn&amp;#34;: 28 }  print(students[&amp;#34;Mary&amp;#34;])  print(&amp;#34;This line will never print.&amp;#34;) students = {  # Name : Age  &amp;#34;James&amp;#34;: 27,  &amp;#34;Sarah&amp;#34;: 19,  &amp;#34;Jocelyn&amp;#34;: 28 }  # Try to access key that doesn&amp;#39;t exist try:  students[&amp;#34;Mary&amp;#34;] except KeyError:  print(&amp;#34;Oops, that key doesn&amp;#39;t exist.&amp;#34;)  # &amp;#34;Catching&amp;#34; the error lets the rest of our code execute print(&amp;#34;.</description>
    </item>
    
    <item>
      <title>08. Movie Questions 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-01/08-movie-questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/08-movie-questions/</guid>
      <description>Movie Questions In this activity, you will test your skills with the OMDb API by collecting data to answer a series of questions.
Instructions Use the OMDb API to retrieve and print answers to the following questions:
  Who was the director of the movie Aliens?
  What was the movie Gladiator rated?
  What year was 50 First Dates released?
  Who wrote Moana?
  What was the plot of the movie Sing?</description>
    </item>
    
    <item>
      <title>09. Banking Deserts  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-03/09-banking-deserts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-03/09-banking-deserts/</guid>
      <description>Banking Deserts In this activity, your task is to understand if there is a relationship between poverty, age, population, and the number of banks in a given area. To help, we’ve provided you with Census data for every U.S. zip code. You will also visualize this data using GeoViews.
Instructions   Retrieve data from the U.S. Census using the Census Python library and the preconfigured labels.
  Load the zip_bank_data.</description>
    </item>
    
    <item>
      <title>09. Iterative Requests 👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-01/09-iterative-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/09-iterative-requests/</guid>
      <description># Dependencies import random import json import requests  # Let&amp;#39;s get the JSON for 100 posts sequentially. url = &amp;#34;http://jsonplaceholder.typicode.com/posts/&amp;#34; # Create an empty list to store the responses response_json = [] # Create random indices representing # a user&amp;#39;s choice of posts indices = random.sample(list(range(1, 100)), 10) indices  # Make a request for each of the indices for x in range(len(indices)):  print(f&amp;#34;Making request number: {x}for ID: {indices[x]}&amp;#34;)   # Get one of the posts  post_response = requests.</description>
    </item>
    
    <item>
      <title>09. Making Exceptions 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/09-making-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/09-making-exceptions/</guid>
      <description>Making Exceptions In this activity, you will create an application that uses try and except to resolve a number of errors.
Instructions   Without removing any of the lines from the provided starter code, create try-except blocks that will allow the application to run without terminating.
  Each except block should handle the specific error that will occur.
  Add a print statement under the except block to log the error.</description>
    </item>
    
    <item>
      <title>10. API Exceptions 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/10-api-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/10-api-exceptions/</guid>
      <description>API Exceptions Not every call placed to an API will return a result. In this activity, you will use try and except to handle errors from API calls.
Instructions   Loop through the characters in the list, and send a request to the Star Wars API.
  Create a try clause and an except clause. In the try clause, append the height, mass, and character name that is available in the Star Wars API to their respective lists.</description>
    </item>
    
    <item>
      <title>10. Iterative Requests 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-01/10-iterative-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/10-iterative-requests/</guid>
      <description>Iterative Requests In this activity, you will test your knowledge of iterative requests by looping through a list of movies and collecting data from the OMDB API on each movie.
Instructions   Consider the following list of movie titles.
movies = [&amp;#34;Aliens&amp;#34;, &amp;#34;Sing&amp;#34;, &amp;#34;Moana&amp;#34;]   Make a request to the OMDb API for each movie in the list. Then:
  Print the director of each movie
  Save the responses in another list</description>
    </item>
    
    <item>
      <title>11.  NYT API 👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-01/11-movie-loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/11-movie-loop/</guid>
      <description> # Dependencies import requests from pprint import pprint from config import api_key  url = &amp;#34;https://api.nytimes.com/svc/search/v2/articlesearch.json?&amp;#34; # Search for articles that mention granola query = &amp;#34;granola&amp;#34; # Build query URL query_url = url + &amp;#34;api-key=&amp;#34; + api_key + &amp;#34;&amp;amp;q=&amp;#34; + query # Request articles articles = requests.get(query_url).json()  # The &amp;#34;response&amp;#34; property in articles contains the actual articles # list comprehension. articles_list = articles[&amp;#34;response&amp;#34;][&amp;#34;docs&amp;#34;] pprint(articles_list)  # Print the web_url of each stored article print(&amp;#34;Your Reading List&amp;#34;) for article in articles_list:  print(article[&amp;#34;web_url&amp;#34;])   </description>
    </item>
    
    <item>
      <title>11. World Bank API  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-02/11-world-bank-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/11-world-bank-api/</guid>
      <description># Dependencies import requests  url = &amp;#34;http://api.worldbank.org/v2/&amp;#34; api_format = &amp;#34;json&amp;#34;  # Get country information in JSON format countries_response = requests.get(f&amp;#34;{url}countries?format={api_format}&amp;#34;).json()  # First element is general information, second is countries themselves countries = countries_response[1] # Report the names for country in countries:  print(country[&amp;#34;name&amp;#34;]) </description>
    </item>
    
    <item>
      <title>12. Retrieving Articles 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-01/12-retrieving-articles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-01/12-retrieving-articles/</guid>
      <description>Retrieving Articles In this activity, you will create an application that grabs articles from the NYT API, stores them within a list, and prints snippets of the articles to the screen.
Instructions   Save the NYT API endpoint to a variable. Make sure that you include the right query parameter for retrieving JSON data!
  Register for and save your API Key to a variable.
  Decide on a search term, and save it to a variable.</description>
    </item>
    
    <item>
      <title>12. Two Calls👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/12-two-calls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/12-two-calls/</guid>
      <description>Lending Types In this activity, you’ll practice making two API calls in sequence. The second API call will depend on the response from the first.
Instructions   Retrieve a list of the lending types that the world bank keeps track of, and extract the ID key for each one.
  Next, determine how many countries are categorized under each lending type. Use a dictionary to store this information.</description>
    </item>
    
  </channel>
</rss>

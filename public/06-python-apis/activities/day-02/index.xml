<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Day 2 on </title>
    <link>/06-python-apis/activities/day-02/</link>
    <description>Recent content in Day 2 on </description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="/06-python-apis/activities/day-02/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01. JSON Traversal Review 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/01-json-traversal-review/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/01-json-traversal-review/</guid>
      <description>JSON Traversal Review This activity is an opportunity to practice loading and parsing JSON in Python.
Instructions   Load the provided JSON.
  Retrieve the video&amp;rsquo;s title.
  Retrieve the video&amp;rsquo;s rating.
  Retrieve the link to the video&amp;rsquo;s first tag.
  Retrieve the number of views for the video.
  References Data Source: Data for this dataset was generated by edX Boot Camps LLC, and is intended for educational purposes only.</description>
    </item>
    
    <item>
      <title>02. Request Review👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/02-request-review/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/02-request-review/</guid>
      <description>Requests &amp;amp; Responses This activity provides practice making requests, converting the response to JSON, and then manipulating the result with Python.
Instructions   Make a request to the following endpoint (https://2u-data-curriculum-team.s3.amazonaws.com/dataviz-classroom/v1.1/06-Python-APIs/request_review.json), and store the response.
  Print the JSON representations of the first and last posts.
  Print number of posts received.
  References Data Source: Mockaroo, LLC. (2021). Realistic Data Generator. https://www.mockaroo.com/
 ✅ Solutions   Solutions Click Here    # Dependencies import json import requests from pprint import pprint # Specify the URL url = &amp;#34;https://2u-data-curriculum-team.</description>
    </item>
    
    <item>
      <title>03. Open Weather Request  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-02/03-open-weather-request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/03-open-weather-request/</guid>
      <description> # Dependencies import json import requests from config import api_key # Save config information url = &amp;#34;http://api.openweathermap.org/data/2.5/weather?&amp;#34; city = &amp;#34;London&amp;#34;  # Build query URL query_url = url + &amp;#34;appid=&amp;#34; + api_key + &amp;#34;&amp;amp;q=&amp;#34; + city # Get weather data weather_response = requests.get(query_url) weather_json = weather_response.json()  # Get the temperature from the response print(f&amp;#34;The weather API responded with: {weather_json}.&amp;#34;) </description>
    </item>
    
    <item>
      <title>04. Burundi Weather App 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/04-burundi-weather-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/04-burundi-weather-app/</guid>
      <description>Weather in Bujumbura This activity gives students practice with making API calls and handling responses.
Instructions   Save all of your &amp;ldquo;config&amp;rdquo; information—i.e., your API key; the base URL; etc.—before moving on.
  Build your query URL.
  Hint: Check the documentation to figure out how to request temperatures in Celsius.
  Make your request, and save the API response.
  Retrieve the current temperature in Bujumbura from the JSON response.</description>
    </item>
    
    <item>
      <title>05. Open Weather DataFrame  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-02/05-open-weather-data-frame/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/05-open-weather-data-frame/</guid>
      <description># Dependencies import matplotlib.pyplot as plt import requests import pandas as pd from config import api_key # Save config information. url = &amp;#34;http://api.openweathermap.org/data/2.5/weather?&amp;#34; units = &amp;#34;metric&amp;#34;  # Build partial query URL query_url = f&amp;#34;{url}appid={api_key}&amp;amp;units={units}&amp;amp;q=&amp;#34; cities = [&amp;#34;Paris&amp;#34;, &amp;#34;London&amp;#34;, &amp;#34;Oslo&amp;#34;, &amp;#34;Beijing&amp;#34;]  # set up lists to hold reponse info lat = [] temp = []  # Loop through the list of cities and perform a request for data on each for city in cities:  response = requests.</description>
    </item>
    
    <item>
      <title>06. TV Rating DataFrame 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/06-tv-ratings-dataframe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/06-tv-ratings-dataframe/</guid>
      <description>TV Ratings In this activity, you will create an application that reads in a list of TV shows, makes multiple requests from an API to retrieve rating information, creates a Pandas DataFrame, and then visually displays the data.
Instructions   You may use the list of TV shows provided in the starter file or create your own.
  Request information on each TV show from the TVmaze API&amp;rsquo;s Show Search endpoint</description>
    </item>
    
    <item>
      <title>07. Weather Stats 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/07-weather-stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/07-weather-stats/</guid>
      <description>Weather Statistics In this activity, you will perform a linear regression on weather data from select cities in the Northern Hemisphere, and you will use the results to predict the temperature in Florence, Italy.
Instructions   Using the starter file as a guide, complete the following steps:
  Create a scatter plot of Temperature vs. Latitude.
  Perform linear regression.
  Create a line equation for the regression.</description>
    </item>
    
    <item>
      <title>08. Exception Handling  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-02/08-exception-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/08-exception-handling/</guid>
      <description>students = {  # Name : Age  &amp;#34;James&amp;#34;: 27,  &amp;#34;Sarah&amp;#34;: 19,  &amp;#34;Jocelyn&amp;#34;: 28 }  print(students[&amp;#34;Mary&amp;#34;])  print(&amp;#34;This line will never print.&amp;#34;) students = {  # Name : Age  &amp;#34;James&amp;#34;: 27,  &amp;#34;Sarah&amp;#34;: 19,  &amp;#34;Jocelyn&amp;#34;: 28 }  # Try to access key that doesn&amp;#39;t exist try:  students[&amp;#34;Mary&amp;#34;] except KeyError:  print(&amp;#34;Oops, that key doesn&amp;#39;t exist.&amp;#34;)  # &amp;#34;Catching&amp;#34; the error lets the rest of our code execute print(&amp;#34;.</description>
    </item>
    
    <item>
      <title>09. Making Exceptions 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/09-making-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/09-making-exceptions/</guid>
      <description>Making Exceptions In this activity, you will create an application that uses try and except to resolve a number of errors.
Instructions   Without removing any of the lines from the provided starter code, create try-except blocks that will allow the application to run without terminating.
  Each except block should handle the specific error that will occur.
  Add a print statement under the except block to log the error.</description>
    </item>
    
    <item>
      <title>10. API Exceptions 👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/10-api-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/10-api-exceptions/</guid>
      <description>API Exceptions Not every call placed to an API will return a result. In this activity, you will use try and except to handle errors from API calls.
Instructions   Loop through the characters in the list, and send a request to the Star Wars API.
  Create a try clause and an except clause. In the try clause, append the height, mass, and character name that is available in the Star Wars API to their respective lists.</description>
    </item>
    
    <item>
      <title>11. World Bank API  👩‍🏫🧑‍🏫</title>
      <link>/06-python-apis/activities/day-02/11-world-bank-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/11-world-bank-api/</guid>
      <description># Dependencies import requests  url = &amp;#34;http://api.worldbank.org/v2/&amp;#34; api_format = &amp;#34;json&amp;#34;  # Get country information in JSON format countries_response = requests.get(f&amp;#34;{url}countries?format={api_format}&amp;#34;).json()  # First element is general information, second is countries themselves countries = countries_response[1] # Report the names for country in countries:  print(country[&amp;#34;name&amp;#34;]) </description>
    </item>
    
    <item>
      <title>12. Two Calls👩‍🎓👨‍🎓</title>
      <link>/06-python-apis/activities/day-02/12-two-calls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-python-apis/activities/day-02/12-two-calls/</guid>
      <description>Lending Types In this activity, you’ll practice making two API calls in sequence. The second API call will depend on the response from the first.
Instructions   Retrieve a list of the lending types that the world bank keeps track of, and extract the ID key for each one.
  Next, determine how many countries are categorized under each lending type. Use a dictionary to store this information.</description>
    </item>
    
  </channel>
</rss>
